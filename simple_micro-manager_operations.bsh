

//AUTHOR:       Cameron Stewart, Research intern at UW-Madison, cameronstewart92@gmail.com, Last revised on October 29, 2015

//COPYRIGHT:    The University of Wisconsin-Madison, 2015

//LICENSE:      This file is distributed under the BSD license.
//License text is included with the source distribution.


//This file is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty
//of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.

//SUMMARY: This script is tests that Micromanger can 
//command the microscope to take an image, process the image, analyze the image,
//save results about the analysis, save the image, write the results to a .csv file,
//control the microscope stage, and send messages to the microcontroller.
//    
//It will also be useful as a reference to write the code to perform those actions


import mmcorej.CharVector; 
import org.micromanager.api.AcquisitionOptions;
import org.micromanager.api.PositionList;
import org.micromanager.api.MultiStagePosition;
import org.micromanager.api.StagePosition;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.System;

import org.apache.commons.math.stat.StatUtils;
import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;

import ij.IJ;
import ij.ImagePlus;
import ij.io.Opener;
import ij.measure.Measurements;
import ij.measure.ResultsTable;
import ij.plugin.filter.BackgroundSubtracter;
import ij.plugin.filter.ParticleAnalyzer;
import ij.process.ImageProcessor;
import ij.ImagePlus;
import ij.io.FileSaver;
import ij.WindowManager;  
import ij.text.TextWindow; 
import ij.plugin.Duplicator;
import ij.text.TextPanel;
import ij.plugin.frame.RoiManager;
import ij.plugin.ImageCalculator;


boolean takeImage=true;
boolean processImage=true;
boolean analyzeImage=false;
boolean saveResults=false;
boolean saveImage=false;
boolean moveStage=false; //WARNING: Ensure that the stage will not damage the objective if it moves
boolean turnOnDevices=false;
boolean writeCSV=false;
String rootDir="C:\\Users\\NIKON\\Pictures\\";

// Micrmanager should set the image aquisition parameters to those defined by Preset in the Group
//of the Configuration settings. These can be modified on the Micromanager interface and then saved
//with the hardware configuration file.


print("hello world");
if (takeImage){
	print("About to take an image...");
	String configGroup="Filters";
	String[] configPreset={"1-DIC"};
	mmc.setConfig(configGroup,configPreset[0]);
	Thread.sleep(1000); //delay for the specified number of milliseconds
	gui.snapSingleImage();
	if (!processImage){
		print("If an image was taken properly, set \"processImage\" (below the last import statement) to true and test that the image can be processed.");
	}
}

//These commands can be easily generated by selecting Plugins>Macros>Record on the ImageJ toolbar.
//Set the script to record Beanshell syntax commands, and then modify the image and it will record your
//actions. 
if (processImage){
	print("About to process the image...");
	Thread.sleep(1000);
	imp = IJ.getImage();
	IJ.run(imp, "Find Edges", "");
	IJ.setAutoThreshold(imp, "Default dark");
	Prefs.blackBackground = true;
	IJ.run(imp, "Convert to Mask", "");
	if (!analyzeImage){
		print("If taken and processed properly, set \"analyzeImage\" to true and test that the image can be analyzed.");
	}
	}
if(analyzeImage){
	print("About to analyze the image...");
	Thread.sleep(1000); // A delay is necessary. Without it, the image will not load before getImage() is called, and there will be no
								//image to be had
	imp = IJ.getImage();
	rm = RoiManager.getInstance();
	if (rm==null) rm = new RoiManager();
	IJ.run(imp, "Analyze Particles...", "size=2-1000 exclude include add");
	rm.runCommand(imp,"Measure");
	if (!saveResults){
		print("If the image was taken, processed, and analyzed properly, set \"saveResults\" to true and test that data about the image can be saved.");
	}
}
if(saveResults){
	print("About to save the results as "+rootDir+"\\testResults.xls"+" ...");
	IJ.saveAs("Results", rootDir+"\\testResults.xls");
	if (!saveImage){
		print("If an image taken, processed, and analyzed and its results were saved, set \"saveImage\" to true and test that the image can be saved.");
		//At this point I'm assuming that you know how to change the boolean variables to test the other functions
	}
}
if(saveImage){
	print("About to save the image as "+rootDir+"\\testImage.tif"+" ...");
	Thread.sleep(1000);
	imp = IJ.getImage();
	IJ.saveAs(imp, "Tiff", rootDir+"testImage.tif");
}
// CSV stands for Comma Separated Values. It is a simple file type to generate
if(writeCSV){
	print("About to write a CSV to "+rootDir+dataFile+startTime+".csv"+" ...");
	String lineSeperator="\r\n";
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss-z");
	startTime=sdf.format(new Date());
	FileWriter writer = new FileWriter(rootDir+dataFile+startTime+".csv",true); 
	writer.write("time, Median Mean Intensity, Mean Mean Instensity, 90th Percentile of Means,"
		+"Median SD of Intensity, Median Median Intensity, 90th Percentile of Medians,"
		+"Mean Max, Median Max, 90th Percentile of Maxes, Mean Area, Median Area, Sample Size,"
		+" Light On Time, Light Off Time, Pump On Delay, Pump Off Delay, MediaOnTime, MediaOffTime"
		+lineSeperator);
	writer.write("Next line"+lineSeperator);
	writer.close();
}
//Beware that the stage cannot damage anything! 
// Micromanager objects, like these, are described in the "GUI API Java Reference (Java/Beanshell)" and 
//"Core API Reference (Java/Beanshell/Matlab)" on the micromanager website.
if(moveStage){
	print("About to move the stage to the positions listed in MicroManager>Tools>StagePositionList");
	xyStage = mmc.getXYStageDevice();
	zStage = mmc.getFocusDevice();
	PositionList pl = gui.getPositionList();
	for (int l=0; l < pl.getNumberOfPositions(); l++) {
		MultiStagePosition.goToPosition(pl.getPosition(l), mmc);
		mmc.waitForSystem();
		Thread.sleep(500); //Give time for things to settle
	}
}

// The port corresponds to the COM port (on Windows) or Serial port where the ControlAnything RS81 device is located.
//These commands, composed of seemingly arbitrary characters Characters, come from the serial communication standard 
//as explained in National Control Device's "R4x/R8x Pro Quick Start Guide." 
// Importantly, the relays must be in command mode and enabled. To turn one ON, send the ASCII character corresponding to
//the relay position+7. To turn one OFF, send the ASCII character corresponding to the relay position-1.
if(turnOnDevices){
	port="COM6";
	print("About turn on the relays at "+port+" ...");

	CharVector initialize = new CharVector(); 
	initialize.add((char) 254);//enter command mode
	initialize.add((char) 248); //enable all
	mmc.writeToSerialPort(port, initialize);
	
	for(relay=1;relay<9;relay++){
		print("Relay "+relay+" will now be turned ON");
		CharVector relayOn = new CharVector(); 
		relayOn.add((char) 254);
		relayOn.add((char) (relay+7)); 
		mmc.writeToSerialPort(port, relayOn);
		Thread.sleep(3000);
	}
	Thread.sleep(5000);
	
	for(relay=1;relay<9;relay++){
		print("Relay "+relay+" will now be turned OFF");
		CharVector relayOff = new CharVector(); 
		relayOff.add((char) 254);
		relayOff.add((char) (relay-1)); 
		mmc.writeToSerialPort(port, relayOff);
		Thread.sleep(3000);
	}
}
print("End of script.");
		